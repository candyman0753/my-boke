#---------------------全局配置块---------------------------#
# user 用户 [用户组]； 默认nobody nobody
user nginx;
# nginx 运行进程数
worker_processes 1; 
#错误日志路径 错误等级
error_log /var/log/nginx/error.log warn;
# nginx 进程文件运行时的路径
pid /var/run/nginx.pid;

#---------------------events配置块---------------------#
events {
  # 网络连接序列化，防止惊群现象
  accept_mutex on;
  # 允许多连接
  multi_accept on;
  # 最大连接数
  worker_connections 1024;
}

#---------------------http配置块-------------------------#
http {
  # 文件类型映射表
  include   /etc/nginx/mime.types;
  # 默认类型，字节流
  default_type application/octet-stream;
  # 日志格式
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  # 访问日志路径
  access_log /var/log/nginx/access.log  main;
  
  # 绕过系统内核传输数据包，提升文件传输性能
  sendfile on;
  
  # 当数据包累计到一定大小才发送，搭配sendfile使用
  # tcp_nopush on;

  # 在keepalive连接下，提高网络包传输实时性，与tcp_nopush互斥
  #tcp_nodelay on;

  # 连接超时
  keepalive_timeout 65;
  
  #文件压缩
  # gzip on;

  # 引入所有配置文件,默认一个default
  # include /etc/nginx/conf.d/*.conf;

  # 负载均衡，默认轮询算法
  # 服务器默认权重都为1
  
  upstream web-app {
    # server web1 down; # down 不参加负载均衡
    # server web2 max_fails=1 fail_timeout=10s max_conns=1024; 
    #经过max_fails失败后，服务暂停fail_timeout时间，限制max_conns最大连接数
    # server web3 backup; # 备用服务器，其他所有服务故障才启用

    # 加权轮询 权重大的优先分配请求
    server web1 weight=2;
    server web2;
    server web3 weight=3;
    # ip_hash 相同的客户端ip请求相同的服务器
    # ip_hash;
  }

  #--------------------------server配置块---------------------------#
  server {
    # 监听端口，port1 port2 ...
    listen 80;
    # 监听域名或ip，url ip ...
    server_name 192.168.0.4;

    # 错误页 重定向
    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
      root /data/50x.html;
    }
    #--------------------------location配置块---------------------------#  
    # 监听规则
    location / {
      root /data;
      index index.html;
    }

    location ~ .*\.(jpg|png|gif)$ {
      root /data/static;
      # 开启压缩
      gzip on;
      # 压缩版本 1.0或1.1 默认1.1
      gzip_http_version 1.1;
      # 压缩等级，1-9
      gzip_comp_level 3;
      # 压缩起步值 1024 = 1k
      gzip_min_length 1k;
      # 压缩类型
      gzip_types image/png image/jpg image/gif;
      # 缓存
      expires 1h;

      # 防盗链
      # none 允许没有http_refer的请求访问资源
      # blocked 允许非 http://(不带协议) 开头的请求访问协议
      # 只允许192.168.0.4该ip的请求访问资源
      valid_referers none blocked 192.168.0.4;
      if ($invalid_referer) {
        return 403;
      }
    }
    # 文件下载。注意文件目录需在指定目录下的download文件里，如下即为/data/download/download
    location ~ /download {
      # 表找预压缩文件
      gzip_static on;
      tcp_nopush on;
      root /data/download;
    }

    location ~ .*\.json$ {
      # 允许跨域
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods GET,POST,PUT.DELETE,OPTIONS;
      add_header Access-Control-Allow-Headers Content-Type;
      # 表示是否允许客户端发送Cookie，不允许需要注释掉
      add_header Access-Control-Allow-Credentials true;
      root /data/json;
    }

    location ~ /web1 {
      # 重写url
      rewrite ^(.*)$ / break;
      # 修改重定向后的location或refresh
      proxy_redirect http://$host/ http://$http_host/;
      # 正向代理客户端
      # proxy_pass http://web1;
      # 反向代理服务端
      proxy_pass http://web-app;
    }
  } 
}
